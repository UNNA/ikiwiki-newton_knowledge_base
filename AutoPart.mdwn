Date: Tue, 23 Mar 2004 21:57:30 -0500
Mime-Version: 1.0 (Produced by PhpWiki 1.3.11p1)
Content-Type: application/x-phpwiki;
  pagename=AutoPart;
  flags="";
  author=150.101.147.57;
  version=1;
  lastmodified=1080097050;
  created=1080097050;
  author_id=150.101.147.57;
  hits=280;
  charset=iso-8859-1
Content-Transfer-Encoding: binary

HOW TO BUILD AN AUTOPART EXTENSION
%%%
----
First, create a new project in NewtonToolkit.%%%
Then, in menu "Project"/"Project settings" we have to change some project
options.
We must change the Output to "Auto Part".
We need to name the extension. So for example, if you want to name the package
"No  Hot Dog", place "No Hot Dog:!EricEngle"
in the lines "Symbol" of the registry card "Output Settings" and "Package
Settings".%%%
It is good programming style to check the boxes at the bottom of the window
"Project Settings" to indicate that this package is for newton 2.0 and to
compress the package (Checkbox "Use Compression")%%%

Next, we must create a text file useing NTK (Menu "File"/"New
Text File"). This file will contain the newtonscripts run when the package is
activated and deactivated.
The following code functions, but risks incompatibility with other packages
which access the "Hot Dog" song.%%%

 // Method called when the package is activated/installed.
 !InstallScript := func(partFrame, removeFrame)
 begin
 // Replace the song with simple clicks.
 !DefGlobalVar('_clickSong, [[GetGlobalVar('soundRegistry).clickBeep]);
 end;
 // Method called when the pacakge is deactivated/removed.
 !RemoveScript := func(removeFrame)
 begin
 // Undefine the clickSong variable and thus get back to built-in
 // default.
 !UndefGlobalVar('_clickSong);
 end;%%%

Save the file with the above text in it, add it to the project, then compile
the project. Compile the project via:
 Menu "Project"/"Build Project").%%%

Download and run. Voilà!%%%

Thanks to PaulGuyot who provided this code in French. Paul's English is
excellent, but since he can code and I can't and I can translate I thought this
was a way to thank him. --Eric Engle
